#-- Build configuration --#
# ARCH_CFLAGS is supplied as a compile option
ARG ARCH_CFLAGS="-O2 -mcpu=cortex-a53+crypto" 
# -mfloat-abi=hard -mfpu=neon-fp-armv8 -mneon-for-64bits"
# AXIS_ARCH is the AXIS platform descriptor
ARG AXIS_ARCH=aarch64
# BUILD_ROOT defines where in the build containers the building takes place
ARG BUILD_ROOT=/build-root
# DOCKERHUB_ARCH is the DockerHub platform descriptor
ARG DOCKERHUB_ARCH=arm64v8
# OPENCV_MODULES defines what OpenCV modules to build
ARG OPENCV_MODULES=core,imgproc,imgcodecs,videoio,objdetect,python3,video
# SDK_ROOT_DIR defines the root directory of the final SDK images
ARG SDK_ROOT_DIR=/axis/
# UBUNTU_ARCH is the Ubuntu platform descriptor
ARG UBUNTU_ARCH=arm64
# TARGET_TOOLCHAIN is the name of the compilation toolchain for the target platform
#ARG TARGET_TOOLCHAIN=aarch64
ARG TARGET_TOOLCHAIN=aarch64-linux-gnu
# TARGET_ROOT defines where in the build containers the resulting application is put
ARG TARGET_ROOT=/target-root
# UBUNTU_VERSION defines the ubuntu version of the build and SDK containers
ARG UBUNTU_VERSION=20.04
# UBUNTU_CODENAME should be the ubuntu codename of the UBUNTU_VERSION used, e.g., focal, hirsute, ..
ARG UBUNTU_CODENAME=focal




#-- Versions of installed packages defined as repository tags --#
ARG NUMPY_VERSION=v1.17.3
ARG OPENBLAS_VERSION=v0.3.14
ARG OPENCV_VERSION=4.5.1
ARG PYTHON_VERSION=3.8.8
ARG PYTESSERACT_VERSION=0.3.7
ARG SCIPY_VERSION=v1.7.1
ARG TESSERACT_VERSION=4.1.1
ARG TFSERVING_VERSION=2.0.0

#-- Build parallelization  --#
ARG OPENBLAS_BUILD_CORES=2
ARG OPENCV_BUILD_CORES=2
ARG PYTHON_BUILD_CORES=4
ARG NUMPY_BUILD_CORES=4
ARG SCIPY_BUILD_CORES=4

#-- ACAP SDK configuration --#
ARG REPO=axisecp
ARG ACAP_SDK_IMAGE=acap-native-sdk
ARG ACAP_SDK_VERSION=1.0_beta2
ARG ACAP_SDK_TAG=${ACAP_SDK_VERSION}-${AXIS_ARCH}-ubuntu20.04


# The ACAP Native SDK is used to get certain libs and headers
FROM ${REPO}/${ACAP_SDK_IMAGE}:${ACAP_SDK_TAG} AS acap-native-sdk
# libs: /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/
# headers: /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/include/


# Create a base image with build tools, env vars, etc.,
FROM ubuntu:${UBUNTU_VERSION} AS build-base

# Setup environment variables
ENV DEBIAN_FRONTEND=noninteractive
ARG BUILD_ROOT
ARG PYTHON_VERSION
ARG TARGET_TOOLCHAIN
ARG TARGET_ROOT
ARG UBUNTU_ARCH
ARG UBUNTU_CODENAME
ARG http_proxy
ARG https_proxy


# To support DOCKER_BUILDKIT=0, base ARGs are converted to ENVs to allow propagation
ENV BUILD_ROOT=$BUILD_ROOT
ENV TARGET_TOOLCHAIN=$TARGET_TOOLCHAIN
ENV TARGET_ROOT=$TARGET_ROOT
ENV UBUNTU_ARCH=$UBUNTU_ARCH
ENV UBUNTU_CODENAME=$UBUNTU_CODENAME
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy


# Add source for target arch
RUN echo \
"deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME main restricted universe multiverse\n\
deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME-updates main restricted universe multiverse\n\
deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ $UBUNTU_CODENAME-backports main restricted universe multiverse\n\
deb [arch=amd64] http://security.ubuntu.com/ubuntu $UBUNTU_CODENAME-security main restricted universe multiverse\n\
deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME main restricted universe multiverse\n\
deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-updates main restricted universe multiverse\n\
deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-backports main restricted universe multiverse\n\
deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $UBUNTU_CODENAME-security main restricted universe multiverse"\
 > /etc/apt/sources.list

# Get crosscompilation toolchain and related packages
RUN dpkg --add-architecture $UBUNTU_ARCH
RUN apt-get update && apt-get install -yf --no-install-recommends \
        autoconf \
        automake \
        autotools-dev \
        build-essential \
        ca-certificates \
        crossbuild-essential-$UBUNTU_ARCH \
        cmake \
        curl \
# 	gfortran-9-aarch64-linux-gnu \
	gfortran-aarch64-linux-gnu \
        git \
        gfortran \
	g++-10 \
	gcc-10 \
        libtool \
	libgfortran-* \
	libc6-dev \
	libxml2-dev \
	libxslt-dev \
        pkg-config \
        python3-dev \
        python3-pip \
        python3-venv \
        wget \
	libleptonica-dev \
 	&& update-ca-certificates \
 	&& apt-get clean

RUN mkdir -p ${TARGET_ROOT}
RUN mkdir -p ${BUILD_ROOT}

# Save a string of what python major.minor version we're using
# for paths, etc.
RUN echo python${PYTHON_VERSION} | sed 's/\([0-9]\.[0-9]*\)\.\([0-9]*\)/\1/' > /tmp/python_version


# Create a emulated base image with build tools, env vars, etc.,
FROM $DOCKERHUB_ARCH/ubuntu:${UBUNTU_VERSION} as build-base-arm
ARG BUILD_ROOT
ENV DEBIAN_FRONTEND=noninteractive
ARG PYTHON_VERSION
ARG TARGET_TOOLCHAIN
ARG TARGET_ROOT
ARG UBUNTU_ARCH
ARG http_proxy
ARG https_proxy

# To support DOCKER_BUILDKIT=0, base ARGs are converted to ENVs to allow propagation
ENV BUILD_ROOT=$BUILD_ROOT

ENV TARGET_TOOLCHAIN=$TARGET_TOOLCHAIN
ENV TARGET_ROOT=$TARGET_ROOT
ENV UBUNTU_ARCH=$UBUNTU_ARCH
ENV http_proxy=$http_proxy
ENV https_proxy=$https_proxy

# qemu is used to emulate arm
COPY --from=multiarch/qemu-user-static:x86_64-arm-5.2.0-2 /usr/bin/qemu-arm-static /usr/bin/

RUN apt-get update && apt-get install -y --no-install-recommends \
        gcc-10 \
	build-essential \
        ca-certificates \
        curl \
        gfortran \
#	gfortran-9-aarch64-linux-gnu \
        git \
        pkg-config \
	libxml2-dev \
	libxslt-dev \
	libgfortran-* \
	libc6-dev \
    && update-ca-certificates

RUN mkdir -p ${TARGET_ROOT}
RUN mkdir -p ${BUILD_ROOT}

# Save a string of what python major.minor version we're using
# for paths, etc.
RUN echo python${PYTHON_VERSION} | sed 's/\([0-9]\.[0-9]*\)\.\([0-9]*\)/\1/' > /tmp/python_version


# Crosscompile OpenBLAS
FROM build-base AS build-openblas
ARG ARCH_CFLAGS
ARG OPENBLAS_BUILD_CORES
ARG OPENBLAS_VERSION
WORKDIR ${BUILD_ROOT}
RUN git clone --depth 1 --branch ${OPENBLAS_VERSION}  https://github.com/xianyi/OpenBLAS.git
WORKDIR ${BUILD_ROOT}/OpenBLAS
RUN HAVE_NEON=1 make -j ${OPENBLAS_BUILD_CORES} TARGET=CORTEXA53 CC=aarch64-linux-gnu-gcc FC=aarch64-linux-gnu-gfortran-9 HOSTCC=gcc-10
RUN make install PREFIX=$TARGET_ROOT/usr


# Crosscompile Python
FROM build-base as build-python-cross
ARG ARCH_CFLAGS
ARG PYTHON_VERSION
ARG PYTHON_BUILD_CORES
RUN mkdir -p $BUILD_ROOT/python_deps
WORKDIR /usr/bin
RUN ln -s python3.*[0-9] python

# Get optional Python module dependencies
RUN apt-get install --reinstall --download-only -o=dir::cache=$BUILD_ROOT/python_deps -y -f \
        libbz2-dev:$UBUNTU_ARCH zlib1g-dev:$UBUNTU_ARCH libssl1.1:$UBUNTU_ARCH libffi-dev:$UBUNTU_ARCH libssl-dev:$UBUNTU_ARCH libreadline6-dev:$UBUNTU_ARCH
WORKDIR $TARGET_ROOT
RUN for f in $BUILD_ROOT/python_deps/archives/*.deb; do dpkg -x $f $TARGET_ROOT; done
RUN mv $TARGET_ROOT/lib/aarch64-linux-gnu/* $TARGET_ROOT/usr/lib/aarch64-linux-gnu/ 
RUN rm -rf $TARGET_ROOT/lib

# TARGET_TOOLCHAIN = aarch64-linux-gnu.

# Copy selected libs we need for python compilation
WORKDIR $TARGET_ROOT/usr/lib/aarch64-linux-gnu/
RUN cp -R libffi* libreadline* libssl* libz* libcrypt* libncurses* libunistring* libidn* libtinfo* libgpm* libbz2* ..
RUN cp -r $TARGET_ROOT/usr/include/aarch64-linux-gnu/* $TARGET_ROOT/usr/include/ && rm -r $TARGET_ROOT/usr/include/aarch64-linux-gnu

# Download Python
RUN curl https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz -o $BUILD_ROOT/python.tgz
RUN tar -xf $BUILD_ROOT/python.tgz -C $BUILD_ROOT/
WORKDIR $BUILD_ROOT/Python-$PYTHON_VERSION


# Setup crosscompilation environment
ENV CC=aarch64-linux-gnu-gcc
ENV CXX=aarch64-linux-gnu-g++
ENV AR=aarch64-linux-gnu-ar
ENV LD=aarch64-linux-gnu-ld
ENV RANLIB=aarch64-linux-gnu-ranlib
ENV CFLAGS="$ARCH_CFLAGS -I$TARGET_ROOT/usr/include"
ENV CXXFLAGS="$ARCH_CFLAGS -I$TARGET_ROOT/usr/include"
ENV CPPFLAGS="$ARCH_CFLAGS -I$TARGET_ROOT/usr/include"
ENV LDFLAGS="-L/usr/lib/aarch64-linux-gnu -L$TARGET_ROOT/usr/lib"
RUN ./configure --host=aarch64-linux-gnu --with-openssl=$TARGET_ROOT/usr \
    --build=x86_64-linux-gnu --prefix=$TARGET_ROOT/usr \
    --enable-shared --disable-ipv6 \
    ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no \
    --with-lto --enable-optimizations
RUN make HOSTPYTHON=/usr/bin/python3 -j $PYTHON_BUILD_CORES CROSS_COMPILE=aarch64-linux-gnu CROSS_COMPILE_TARGET=yes
RUN make altinstall HOSTPYTHON=python3 CROSS_COMPILE=aarch64-linux-gnu CROSS_COMPILE_TARGET=yes prefix=$TARGET_ROOT/usr
WORKDIR $TARGET_ROOT/usr/bin
RUN ln -s python3.*[0-9] python3
RUN mkdir -p $TARGET_ROOT/usr/include/aarch64-linux-gnu/$(cat /tmp/python_version) && \
    cp -r $TARGET_ROOT/usr/include/$(cat /tmp/python_version)/* $TARGET_ROOT/usr/include/aarch64-linux-gnu/$(cat /tmp/python_version)

# Continue Python install with installing
# pip in emulated environment
FROM build-base-arm as build-python
ENV PATH=$TARGET_ROOT/usr/bin:$PATH
ENV LD_LIBRARY_PATH=$TARGET_ROOT/usr/lib:$LD_LIBRARY_PATH
COPY --from=build-python-cross $TARGET_ROOT $TARGET_ROOT
WORKDIR ${BUILD_ROOT}/pip
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
RUN $TARGET_ROOT/usr/bin/python3 get-pip.py
# Fix to not use static paths to $TARGET_ROOT
RUN sed -i '1s/.*/#!\/usr\/bin\/env python3/g' $TARGET_ROOT/usr/bin/pip*

# Build NumPy with OpenBLAS
# This build is done emulated right now until more work
# has been put in researching how to crosscompile
# python packages
# Building numpy like this vs apt-get shows ~5% lower proc times
# in basic math ops
# Building numpy with OpenBLAS as BLAS/Lapack vs built-in BLAS/Lapack
# shows between 50% to 99% lower proc times depending on the linalg op used
FROM build-base-arm AS build-python-numpy
ARG ARCH_CFLAGS
ARG NUMPY_BUILD_CORES
ARG NUMPY_VERSION
ENV CFLAGS="$ARCH_CFLAGS"
ENV LD_LIBRARY_PATH=$BUILD_ROOT/usr/lib:$LD_LIBRARY_PATH
ENV NPY_NUM_BUILD_JOBS=$NUMPY_BUILD_CORES
ENV PATH=$BUILD_ROOT/usr/bin:$BUILD_ROOT/usr/local/bin:$PATH
COPY --from=build-openblas $TARGET_ROOT $BUILD_ROOT
COPY --from=build-python $TARGET_ROOT $BUILD_ROOT
WORKDIR $BUILD_ROOT
RUN git clone --depth 1 --branch ${NUMPY_VERSION}  https://github.com/numpy/numpy
WORKDIR $BUILD_ROOT/numpy
RUN cp site.cfg.example site.cfg
RUN echo "[openblas]\n" \
         "libraries = openblas\n" \
         "library_dirs = ${BUILD_ROOT}/usr/lib\n" \
         "include_dirs = ${BUILD_ROOT}/usr/include\n" \
         "[default]\n" \
         "include_dirs = ${BUILD_ROOT}/usr/include\n" \
         "library_dirs = ${BUILD_ROOT}/usr/lib\n" \
         "[lapack]\n" \
         "lapack_libs = openblas\n" \
         "library_dirs = ${BUILD_ROOT}/usr/lib\n" \
         >> site.cfg
RUN CC="gcc -I$BUILD_ROOT/usr/include -I$BUILD_ROOT/usr/include/$(cat /tmp/python_version) $ARCH_CFLAGS" python3 -m pip install cython
RUN CC="gcc -I$BUILD_ROOT/usr/include -I$BUILD_ROOT/usr/include/$(cat /tmp/python_version) $ARCH_CFLAGS" python3 setup.py config
RUN CC="gcc -I$BUILD_ROOT/usr/include -I$BUILD_ROOT/usr/include/$(cat /tmp/python_version) $ARCH_CFLAGS" python3 -m pip install . --use-feature=in-tree-build -v --prefix=$TARGET_ROOT/usr
RUN mkdir -p ${BUILD_ROOT}/python-numpy-deps
RUN apt-get install --reinstall --download-only -o=dir::cache=${BUILD_ROOT}/python-numpy-deps -y --no-install-recommends \
        libgfortran5
RUN for f in ${BUILD_ROOT}/python-numpy-deps/archives/*.deb; do dpkg -x $f $TARGET_ROOT; done

# Build SciPy with OpenBLAS
FROM build-base-arm AS build-python-scipy
ARG ARCH_CFLAGS
ARG SCIPY_BUILD_CORES
ARG SCIPY_VERSION
ENV CC="gcc -I$BUILD_ROOT/usr/include $ARCH_CFLAGS"
ENV CFLAGS="$ARCH_CFLAGS"
ENV LD_LIBRARY_PATH=$BUILD_ROOT/usr/lib:$LD_LIBRARY_PATH
ENV NPY_NUM_BUILD_JOBS=$SCIPY_BUILD_CORES
ENV PATH=$BUILD_ROOT/usr/bin:$BUILD_ROOT/usr/local/bin:$PATH
WORKDIR $BUILD_ROOT
RUN git clone --depth 1 --branch ${SCIPY_VERSION}  https://github.com/scipy/scipy.git
WORKDIR $BUILD_ROOT/scipy
RUN git submodule update --init
COPY --from=build-openblas $TARGET_ROOT $BUILD_ROOT
COPY --from=build-python $TARGET_ROOT $BUILD_ROOT
COPY --from=build-python-numpy $TARGET_ROOT $BUILD_ROOT
ENV LAPACK=${BUILD_ROOT}/usr/lib/libopenblas.so
ENV BLAS=${BUILD_ROOT}/usr/lib/libopenblas.so
RUN python3 -m pip install cython tempita==0.4 pybind11 pythran
RUN python3 setup.py build_ext -j $SCIPY_BUILD_CORES bdist_wheel
RUN python3 -m pip install dist/*.whl --prefix=$TARGET_ROOT/usr



# Compile the protofiles natively
FROM build-base AS build-python-tfserving
ARG TFSERVING_VERSION
RUN apt-get install -y --no-install-recommends \
    libprotobuf-dev \
    python3-grpc-tools \
    python3-grpcio
WORKDIR ${BUILD_ROOT}
RUN git clone --depth 1 --branch v${TFSERVING_VERSION}  https://github.com/tensorflow/tensorflow.git
RUN git clone --depth 1 --branch ${TFSERVING_VERSION}  https://github.com/tensorflow/serving.git
COPY tfserving/install-tf.sh .
RUN ["chmod", "+x", "./install-tf.sh"]
RUN ./install-tf.sh ${BUILD_ROOT}/tensorflow ${BUILD_ROOT}/serving $TARGET_ROOT

WORKDIR $TARGET_ROOT/usr/lib/python3/dist-packages
COPY tfserving/tf_proto_utils.py .

ARG TARGET_ROOT=/target-root
RUN mkdir -p ${BUILD_ROOT}/python-grpc
RUN apt-get install --download-only -o=dir::cache=${BUILD_ROOT}/python-grpc -y --no-install-recommends \
        python3-grpcio:arm64 \
        python3-protobuf:arm64

WORKDIR $TARGET_ROOT
RUN for f in ${BUILD_ROOT}/python-grpc/archives/*.deb; do dpkg -x $f $TARGET_ROOT; done
RUN find * -maxdepth 0 -type d -not -name 'usr' -and -not -name 'lib' -exec rm -rf {} \;
RUN rm -rf lib/x86_64-linux-gnu usr/lib/x86_64-linux-gnu
RUN cp -r lib/* usr/lib/ && rm -rf lib
WORKDIR $TARGET_ROOT/usr
RUN find * -maxdepth 0 -type d -not -name 'bin' -and -not -name 'lib' -and -not -name 'sbin' -exec rm -rf {} \;

# Crosscompile the OCR engine tesseract
FROM build-base AS build-tesseract
ARG ARCH_CFLAGS
ARG TESSERACT_VERSION
RUN mkdir -p $BUILD_ROOT/tesseract_deps
RUN apt-get update && apt-get install --reinstall --download-only -o=dir::cache=$BUILD_ROOT/tesseract_deps -y -f \
    libleptonica-dev:arm64 libicu-dev:arm64 libpango1.0-dev:arm64 libcairo2-dev:arm64 \
    libpng-dev:arm64 libjpeg8-dev:arm64 libtiff5-dev:arm64 libgomp1:arm64
RUN for f in $BUILD_ROOT/tesseract_deps/archives/*.deb; do dpkg -x $f $TARGET_ROOT; done
RUN cp -r $TARGET_ROOT/lib/* $TARGET_ROOT/usr/lib/ && rm -rf $TARGET_ROOT/lib/
RUN apt-get install --reinstall -y -f \
    libleptonica-dev:arm64 libicu-dev:arm64 libpango1.0-dev:arm64 libcairo2-dev:arm64 \
    libpng-dev:arm64 libjpeg8-dev:arm64 libtiff5-dev:arm64

ARG TESSERACT_TARGET_TOOLCHAIN=aarch64-linux-gnu


WORKDIR ${BUILD_ROOT}
RUN git clone --depth 1 --branch ${TESSERACT_VERSION} https://github.com/tesseract-ocr/tesseract.git
WORKDIR ${BUILD_ROOT}/tesseract
ENV LD_LIBRARY_PATH=$TARGET_ROOT/usr/lib:$TARGET_ROOT/usr/lib/$TARGET_TOOLCHAIN:$LD_LIBRARY_PATH
ENV PATH=$TARGET_ROOT/usr/bin:$PATH
ENV CC=${TESSERACT_TARGET_TOOLCHAIN}-gcc
ENV CXX=${TESSERACT_TARGET_TOOLCHAIN}-g++
ENV CPP=${TESSERACT_TARGET_TOOLCHAIN}-g++
ENV CFLAGS="$ARCH_CFLAGS -I$TARGET_ROOT/usr/include"
ENV CXXFLAGS="$ARCH_CFLAGS -I$TARGET_ROOT/usr/include"
ENV CPPFLAGS="$ARCH_CFLAGS -I$TARGET_ROOT/usr/include"
RUN ./autogen.sh
RUN ./configure --prefix=$TARGET_ROOT/usr --host=aarch64-linux-gnu
RUN make
RUN make install
RUN ldconfig


FROM build-base-arm AS build-python-pytesseract
ARG PYTESSERACT_VERSION
RUN mkdir -p $BUILD_ROOT/pillow_deps
RUN apt-get install --reinstall --download-only -o=dir::cache=$BUILD_ROOT/pillow_deps -y -f libjpeg8-dev
RUN for f in $BUILD_ROOT/pillow_deps/archives/*.deb; do dpkg -x $f $TARGET_ROOT; done
RUN apt-get install -y zlib1g-dev libjpeg8-dev
COPY --from=build-python $TARGET_ROOT $BUILD_ROOT
ENV LD_LIBRARY_PATH=$BUILD_ROOT/usr/lib:$TARGET_ROOT/usr/lib:$LD_LIBRARY_PATH
ENV PATH=$BUILD_ROOT/usr/bin:$TARGET_ROOT/usr/bin:$PATH
RUN CFLAGS="-I$BUILD_ROOT/usr/include -I$TARGET_ROOT/usr/include $ARCH_CFLAGS" python3 -m pip install pytesseract==${PYTESSERACT_VERSION} --target=$TARGET_ROOT
#WORKDIR $TARGET_ROOT
#RUN mkdir -p usr/lib/python3.8/dist-packages/
#RUN mv PIL usr/lib/python3.8/dist-packages/ && mv pytesseract usr/lib/python3.8/dist-packages/
#RUN mkdir -p usr && mv bin usr
#RUN rm -rf Pillow*  pytesseract*
COPY --from=build-tesseract $TARGET_ROOT $TARGET_ROOT

# Crosscompile OpenCV with AXIS VDO bindings
FROM build-base AS build-opencv
ARG ARCH_CFLAGS
ARG AXIS_ARCH
ARG OPENCV_BUILD_CORES
ARG OPENCV_MODULES
ARG OPENCV_VERSION
#ARG OPENCV_TARGET_TOOLCHAIN=aarch64-linux-gnu

# Get required packages for both build env and target env
RUN mkdir -p $BUILD_ROOT/opencv_deps
RUN apt-get install --reinstall --download-only -o=dir::cache=$BUILD_ROOT/opencv_deps -y -f libglib2.0-dev:$UBUNTU_ARCH libsystemd0:$UBUNTU_ARCH libgfortran5:$UBUNTU_ARCH
RUN for f in $BUILD_ROOT/opencv_deps/archives/*.deb; do dpkg -x $f $TARGET_ROOT; done
RUN for f in $BUILD_ROOT/opencv_deps/archives/*.deb; do dpkg -x $f $TARGET_ROOT/build; done
RUN apt-get install -y libglib2.0-dev libsystemd0 libglib2.0-dev:$UBUNTU_ARCH libsystemd0:$UBUNTU_ARCH

RUN cp -r /usr/lib/x86_64-linux-gnu/glib-2.0 /usr/lib/
#RUN cp -r /usr/lib/x86_64-linux-gnu/glib-2.0/* /usr/lib/


# Get AXIS specific files for the build environment
RUN mkdir -p /usr/lib/$TARGET_TOOLCHAIN/pkgconfig
ENV PKG_CONFIG_LIBDIR=/usr/share/pkgconfig:/usr/lib/$TARGET_TOOLCHAIN/pkgconfig
COPY opencv/capaxis/$TARGET_TOOLCHAIN/include/ /usr/include/vdo
COPY opencv/capaxis/$TARGET_TOOLCHAIN/lib/ /usr/lib/$TARGET_TOOLCHAIN
#COPY opencv/capaxis/$TARGET_TOOLCHAIN/lib/ /usr/lib/$TARGET_TOOLCHAIN
COPY opencv/capaxisvdo.pc /usr/lib/$TARGET_TOOLCHAIN/pkgconfig/
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/include/vdo/* /usr/include/vdo/
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/ /usr/lib/$TARGET_TOOLCHAIN/


# Get AXIS specific files for the runtime
# The stubs added below should perhaps be separated from lib/ to avoid confusion vs full lib counterparts
COPY opencv/capaxis/$TARGET_TOOLCHAIN/stubs/ $TARGET_ROOT/build/usr/lib/
COPY opencv/capaxis/$TARGET_TOOLCHAIN/lib/ $TARGET_ROOT/build/usr/lib/
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/glib-2.0 $TARGET_ROOT/usr/lib/glib-2.0
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libfido* $TARGET_ROOT/build/usr/lib/
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libvdo* $TARGET_ROOT/build/usr/lib/
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libfido* /usr/lib/$TARGET_TOOLCHAIN/
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libvdo* /usr/lib/$TARGET_TOOLCHAIN/
COPY --from=build-openblas $TARGET_ROOT $TARGET_ROOT/build
COPY --from=build-python $TARGET_ROOT $TARGET_ROOT/build
COPY --from=build-python-numpy $TARGET_ROOT $TARGET_ROOT/build



# SEEMS DUPLICATED STUFF, removed, I was wrong, it was not duplicated, added again, sorry johan
COPY opencv/capaxis/$TARGET_TOOLCHAIN/stubs/ $TARGET_ROOT/usr/lib/
COPY opencv/capaxis/$TARGET_TOOLCHAIN/lib/ $TARGET_ROOT/usr/lib/
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libfido* $TARGET_ROOT/usr/lib/
COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libvdo* $TARGET_ROOT/usr/lib/

# Add libfido missing symlink
WORKDIR $TARGET_ROOT/build/usr/lib
RUN ln -s libfido.so.1 libfido.so

WORKDIR $TARGET_ROOT/usr/lib
RUN ln -s libfido.so.1 libfido.so

# Download OpenCV
WORKDIR $BUILD_ROOT
RUN curl -fsSL https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz | tar -xz
WORKDIR $BUILD_ROOT/opencv-${OPENCV_VERSION}
COPY opencv/cap_axis_vdo.cpp modules/videoio/src
COPY opencv/detect_axis_vdo.cmake modules/videoio/cmake
COPY opencv/axisvdo-4.5.1.patch .
RUN patch -p 1 < axisvdo-${OPENCV_VERSION}.patch

# A fix for cmake not finding our blas/lapack headers when crosscompiling
RUN sed -i 's/_find_header_file_in_dirs(OPENCV_CBLAS.*/set(OPENCV_CBLAS_H_PATH_OpenBLAS "${LAPACK_INCLUDE_DIR}\/cblas.h")/g' cmake/OpenCVFindLAPACK.cmake
RUN sed -i 's/_find_header_file_in_dirs(OPENCV_LAPACKE.*/set(OPENCV_LAPACKE_H_PATH_OpenBLAS "${LAPACK_INCLUDE_DIR}\/lapacke.h")/g' cmake/OpenCVFindLAPACK.cmake

WORKDIR $BUILD_ROOT/opencv-${OPENCV_VERSION}/build
RUN cmake -D CMAKE_TOOLCHAIN_FILE=../platforms/linux/aarch64-gnu.toolchain.cmake \
          -D CMAKE_BUILD_TYPE=RELEASE \
           # This path will contain all opencv header files
          -D CMAKE_INSTALL_PREFIX=$TARGET_ROOT/usr \
          -D INSTALL_C_EXAMPLES=OFF \
          -D PYTHON3_EXECUTABLE=/usr/bin/python3 \
          -D PYTHON3_INCLUDE_PATH=$TARGET_ROOT/build/usr/include/$(cat /tmp/python_version) \
          -D PYTHON3_LIBRARIES=$TARGET_ROOT/build/usr/lib/$TARGET_TOOLCHAIN/lib$(cat /tmp/python_version).so \
          -D PYTHON3_NUMPY_INCLUDE_DIRS=$TARGET_ROOT/build/usr/lib/$(cat /tmp/python_version)/site-packages/numpy/core/include \
          -D OPENCV_PYTHON3_INSTALL_PATH=$TARGET_ROOT/usr/lib/$(cat /tmp/python_version)/dist-packages \
          -D CMAKE_C_FLAGS="$ARCH_CFLAGS --sysroot=$TARGET_ROOT/build" \
          -D CMAKE_CXX_FLAGS="$ARCH_CFLAGS --sysroot=$TARGET_ROOT/build" \
          -D OpenBLAS_LIB=$TARGET_ROOT/usr/lib/libopenblas.so \
          -D OpenBLAS_INCLUDE_DIR=$TARGET_ROOT/usr/include \
          -D BLAS_LIBRARIES=$TARGET_ROOT/usr/lib/libopenblas.so \
          # ON:
          -D BUILD_opencv_python3=ON \
          -D WITH_TBB=ON \
          -D WITH_OPENGL=ON \
          -D BUILD_JPEG=ON \
          -D ENABLE_NEON=ON \
          -D CPU_BASELINE=NEON , VFPV3 \
          -D WITH_AXIS_VDO=ON \
          -D CMAKE_SKIP_RPATH=ON \
          -D OPENCV_SKIP_PYTHON_LOADER=ON \
          -D OPENCV_GENERATE_PKGCONFIG=ON \
          # ON end.
          -D WITH_OPENEXR=OFF \
          -D WITH_IPP=OFF \
          -D WITH_WEBP=OFF                  \
          -D ENABLE_PRECOMPILED_HEADERS=OFF \
          -D WITH_1394=OFF \
          -D WITH_LIBV4L=OFF \
          -D WITH_V4L=OFF \
          -D WITH_QT=OFF \
          -D WITH_GTK=OFF \
          -D WITH_FFMPEG=OFF \
          -D WITH_GSTREAMER=OFF \
          -D WITH_GSTREAMER_0_10=OFF \
          -D BUILD_LIST=$OPENCV_MODULES \
          -D BUILD_EXAMPLES=OFF \
          -D BUILD_OPENCV_DNN=OFF \
          -D BUILD_OPENCV_APPS=OFF \
          -D BUILD_DOCS=OFF \
          -D BUILD_opencv_python=OFF \
          -D BUILD_PNG=OFF \
          -D BUILD_IPP_IWD=OFF \
          -D BUILD_QUIRC=OFF \
          -D BUILD_OPENEXR=OFF \
          -D WITH_JASPER=OFF \
          -D BUILD_TIFF=OFF \
          -D BUILD_PERF_TESTS=OFF \
          -D HAVE_IPP_ICV=OFF \
          -D BUILD_IPP=OFF \
          -D BUILD_ZLIB=OFF \
          -D BUILD_TESTS=OFF \
          -D BUILD_IPP_ICV=OFF \
          -D BUILD_PROTOBUF=OFF \
          -D WITH_CUDA=OFF \
          -D HAVE_WEBP=OFF \
          ..

# Build openCV libraries and other tools
RUN make -j ${OPENCV_BUILD_CORES} install 

# Make the header files available by creating a symlink to
# the path specified in CMAKE params
WORKDIR $TARGET_ROOT/usr/include
RUN ln -sf opencv4/opencv2 opencv2

RUN cd $TARGET_ROOT/usr/lib/$(cat /tmp/python_version)/dist-packages && \
    mv cv2.*.so cv2.so && \
    cp -r $TARGET_ROOT/lib/* $TARGET_ROOT/usr/lib/ && rm -rf $TARGET_ROOT/lib
#WORKDIR $TARGET_ROOT/usr/lib/python3.8/dist-packages
#RUN mv cv2.*.so cv2.so
#RUN cp -r $TARGET_ROOT/lib/* $TARGET_ROOT/usr/lib/ && rm -rf $TARGET_ROOT/lib



FROM ubuntu:${UBUNTU_VERSION} AS packages
ARG SDK_ROOT_DIR
ARG TARGET_ROOT
RUN mkdir -p $SDK_ROOT_DIR
COPY --from=build-openblas $TARGET_ROOT $SDK_ROOT_DIR/openblas
COPY --from=build-opencv $TARGET_ROOT $SDK_ROOT_DIR/opencv
COPY --from=build-python $TARGET_ROOT $SDK_ROOT_DIR/python
COPY --from=build-python-numpy $TARGET_ROOT $SDK_ROOT_DIR/python-numpy
COPY --from=build-python-pytesseract $TARGET_ROOT $SDK_ROOT_DIR/python-pytesseract
COPY --from=build-python-tfserving $TARGET_ROOT $SDK_ROOT_DIR/python-tfserving
COPY --from=build-python-scipy $TARGET_ROOT $SDK_ROOT_DIR/python-scipy
COPY --from=build-tesseract $TARGET_ROOT $SDK_ROOT_DIR/tesseract
#TODO: johan says that this is wrong, so I removed it
#COPY --from=build-install-opencv-python $TARGET_ROOT $SDK_ROOT_DIR/opencv-python



#TODO: FIX THIS COPY, ALSOm it must be copied in sdk-devel-prune, uncomment it once here is fixed
# Get OpenCL-related libs from the Native SDK
#FROM build-base AS build-opencl-devel
#ARG AXIS_ARCH
#COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/include/CL $TARGET_ROOT/usr/include/CL
#COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/pkgconfig/opencl.pc $TARGET_ROOT/usr/lib/pkgconfig/opencl.pc
#COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libEGL* $TARGET_ROOT/usr/lib/
#COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libOpenCL* $TARGET_ROOT/usr/lib/
#COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libGAL* $TARGET_ROOT/usr/lib/
#COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libVSC* $TARGET_ROOT/usr/lib/
#COPY --from=acap-native-sdk /opt/axis/acapsdk/sysroots/$AXIS_ARCH/usr/lib/libGLES* $TARGET_ROOT/usr/lib/


# Development-related tensorflow proto files
FROM build-base AS build-tensorflow-proto-devel
WORKDIR $BUILD_ROOT/tmp
# Download tensorflow
RUN curl -fsSL https://github.com/tensorflow/tensorflow/archive/v2.1.0.tar.gz | tar -xz --one-top-level=tf --strip-components 1

# Download tensorflow serving
RUN curl -fsSL https://github.com/tensorflow/serving/archive/2.1.0.tar.gz | tar -xz --one-top-level=tf-serving --strip-components 1

RUN mkdir -p $BUILD_ROOT/tfproto
RUN cp -r $BUILD_ROOT/tmp/tf/tensorflow $BUILD_ROOT/tfproto/tensorflow
RUN cp -r $BUILD_ROOT/tmp/tf-serving/tensorflow_serving $BUILD_ROOT/tfproto/tensorflow_serving

# Install packages needed for building
RUN apt-get install -y \
        binutils-multiarch \
        protobuf-compiler \
        protobuf-compiler-grpc \
        libprotobuf-dev \
        libgrpc++-dev \
        make

WORKDIR $BUILD_ROOT/tfproto/build
# Compile proto files from tensorflow
COPY tfproto/Makefile .

RUN CXX=aarch64-linux-gnu-g++ OUT_PATH=$TARGET_ROOT API_PATH=$BUILD_ROOT/tfproto make


# Package the "devel"-tagged image and prune some unneeded files
FROM build-base AS sdk-devel-prune
ARG SDK_ROOT_DIR
COPY --from=packages $SDK_ROOT_DIR $SDK_ROOT_DIR
#COPY --from=build-opencl-devel $TARGET_ROOT $SDK_ROOT_DIR/opencl
#TODO: FIX THIS
COPY --from=build-tensorflow-proto-devel $TARGET_ROOT $SDK_ROOT_DIR/tfproto

# General pruning
WORKDIR $SDK_ROOT_DIR
RUN find * -type d -name 'x86_64-linux-gnu' -prune -exec rm -rf {} \;
RUN find * -type d -name 'share' -prune -exec rm -rf {} \;


# Package the "runtime"-tagged image and prune some unneeded files
FROM ubuntu:${UBUNTU_VERSION} AS sdk-runtime-prune
ARG SDK_ROOT_DIR
COPY --from=packages $SDK_ROOT_DIR $SDK_ROOT_DIR
WORKDIR $SDK_ROOT_DIR




# Prune runtime unrelated files
RUN find */usr/* -maxdepth 0 -type d -not -name 'bin' -and -not -name 'lib' -and -not -name 'sbin' -exec rm -rf {} \;
RUN find * -type f -name "*.a" -exec rm -f {} \;

# Minimal container for the devel-tagged SDK
FROM build-base AS sdk-devel
ARG ARCH_CFLAGS
ARG AXIS_ARCH
ARG BUILD_ROOT
ARG DOCKERHUB_ARCH
ARG PYTHON_VERSION
ARG SDK_ROOT_DIR
ARG TARGET_TOOLCHAIN
ARG TARGET_ROOT
ARG UBUNTU_ARCH
ARG UBUNTU_CODENAME
ARG http_proxy
ARG https_proxy

# To support DOCKER_BUILDKIT=0, base ARGs are converted to ENVs to allow propagation
ENV ARCH_CFLAGS=$ARCH_CFLAGS
ENV AXIS_ARCH=$AXIS_ARCH
ENV BUILD_ROOT=$BUILD_ROOT
ENV DOCKERHUB_ARCH=$DOCKERHUB_ARCH
ENV TARGET_TOOLCHAIN=$TARGET_TOOLCHAIN
ENV TARGET_ROOT=$TARGET_ROOT
ENV UBUNTU_ARCH=$UBUNTU_ARCH
ENV UBUNTU_CODENAME=$UBUNTU_CODENAME
COPY --from=sdk-devel-prune $SDK_ROOT_DIR $SDK_ROOT_DIR


# Minimal container for the runtime-tagged SDK
FROM ubuntu:${UBUNTU_VERSION} AS sdk-runtime
ARG SDK_ROOT_DIR 
COPY --from=sdk-runtime-prune $SDK_ROOT_DIR $SDK_ROOT_DIR
RUN cp -r /axis/python-numpy/usr/lib/python3.8/site-packages /axis/python-numpy/usr/lib/python3.8/dist-packages/