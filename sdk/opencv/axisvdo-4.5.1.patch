Copyright (C) 2020 Axis Communications AB, Lund, Sweden

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 45fc6de72a..d607f99690 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -443,6 +443,9 @@ OCV_OPTION(WITH_TENGINE "Include Arm Inference Tengine support" OFF
 OCV_OPTION(WITH_ONNX "Include Microsoft ONNX Runtime support" OFF
   VISIBLE_IF TRUE
   VERIFY HAVE_ONNX)
+OCV_OPTION(WITH_AXIS_VDO "Include Axis VDO support" OFF
+  VISIBLE_IF NOT ANDROID AND NOT APPLE
+  VERIFY HAVE_AXIS_VDO)
 
 # OpenCV build components
 # ===================================================
@@ -1393,6 +1396,10 @@ if(WITH_LIBREALSENSE OR HAVE_LIBREALSENSE)
   status("    Intel RealSense:" HAVE_LIBREALSENSE THEN "YES (${LIBREALSENSE_VERSION})" ELSE NO)
 endif()
 
+if(WITH_AXIS_VDO OR HAVE_AXIS_VDO)
+  status("    AxisVdo:" HAVE_AXIS_VDO THEN "YES (${AXIS_VDO_VERSION})" ELSE NO)
+endif()
+
 if(WITH_MFX OR HAVE_MFX)
   status("    Intel Media SDK:" HAVE_MFX      THEN "YES (${MFX_LIBRARY})" ELSE NO)
 endif()
diff --git a/modules/videoio/CMakeLists.txt b/modules/videoio/CMakeLists.txt
index a31d969ab8..5cbe11e734 100644
--- a/modules/videoio/CMakeLists.txt
+++ b/modules/videoio/CMakeLists.txt
@@ -202,6 +202,15 @@ if(TARGET ocv.3rdparty.android_mediandk)
   list(APPEND tgts ocv.3rdparty.android_mediandk)
 endif()
 
+if(TARGET ocv.3rdparty.axis_vdo)
+   if("axis_vdo" IN_LIST VIDEOIO_PLUGIN_LIST OR VIDEOIO_PLUGIN_LIST STREQUAL "all")
+    ocv_create_builtin_videoio_plugin("opencv_videoio_axis_vdo" ocv.3rdparty.axis_vdo "cap_axis_vdo.cpp")
+  else()
+    list(APPEND videoio_srcs ${CMAKE_CURRENT_LIST_DIR}/src/cap_axis_vdo.cpp)
+    list(APPEND tgts ocv.3rdparty.axis_vdo)
+  endif()
+endif()
+
 ocv_set_module_sources(HEADERS ${videoio_ext_hdrs} ${videoio_hdrs} SOURCES ${videoio_srcs})
 ocv_module_include_directories()
 ocv_create_module()
diff --git a/modules/videoio/cmake/init.cmake b/modules/videoio/cmake/init.cmake
index 500b9386ff..76105e8460 100644
--- a/modules/videoio/cmake/init.cmake
+++ b/modules/videoio/cmake/init.cmake
@@ -27,6 +27,8 @@ function(ocv_add_external_target name inc link def)
   endif()
 endfunction()
 
+include(FindPkgConfig)
+
 add_backend("ffmpeg" WITH_FFMPEG)
 add_backend("gstreamer" WITH_GSTREAMER)
 add_backend("v4l" WITH_V4L)
@@ -44,6 +46,7 @@ add_backend("xine" WITH_XINE)
 
 add_backend("avfoundation" WITH_AVFOUNDATION)
 add_backend("ios" WITH_CAP_IOS)
+add_backend("axis_vdo" WITH_AXIS_VDO)
 
 add_backend("dshow" WITH_DSHOW)
 add_backend("msmf" WITH_MSMF)
diff --git a/modules/videoio/include/opencv2/videoio.hpp b/modules/videoio/include/opencv2/videoio.hpp
index 7beb810e23..d743f09fba 100644
--- a/modules/videoio/include/opencv2/videoio.hpp
+++ b/modules/videoio/include/opencv2/videoio.hpp
@@ -122,6 +122,7 @@ enum VideoCaptureAPIs {
        CAP_INTEL_MFX    = 2300,         //!< Intel MediaSDK
        CAP_XINE         = 2400,         //!< XINE engine (Linux)
        CAP_UEYE         = 2500,         //!< uEye Camera API
+       CAP_AXIS_VDO     = 2600,         //!< AxisVDO (Compatible with UniMatrix)
      };
 
 /** @brief %VideoCapture generic properties identifier.
@@ -598,6 +599,50 @@ enum { CAP_PROP_IMAGES_BASE = 18000,
 
 //! @} Images
 
+/** @name UniMatrix
+    @{
+*/
+
+//! UniMatrix properties
+enum { CAP_PROP_UNIMATRIX_FD          = 19001, // Buffer file descriptor
+       CAP_PROP_UNIMATRIX_FD_OFFSET   = 19002, // Buffer offset
+       CAP_PROP_UNIMATRIX_FD_CAPACITY = 19003, // Buffer capacity
+       CAP_PROP_UNIMATRIX_MAX_BUFFERS = 19004, // Maximum buffers in-flight
+
+       // Optional properties below
+       CAP_PROP_UNIMATRIX_CROP_X      = 19080, // Crop X - Region of Interest
+       CAP_PROP_UNIMATRIX_CROP_Y      = 19081, // Crop Y - Region of Interest
+       CAP_PROP_UNIMATRIX_CROP_W      = 19082, // Crop W - Region of Interest
+       CAP_PROP_UNIMATRIX_CROP_H      = 19083, // Crop H - Region of Interest
+       CAP_PROP_UNIMATRIX_SIMD_ALIGN  = 19084, // Align the start of every Line
+
+       CAP_PROP_UNIMATRIX_FNUMBER         = 19100, // f-number
+       CAP_PROP_UNIMATRIX_OPTICS_TYPE     = 19101, // OpticsType
+       CAP_PROP_UNIMATRIX_TONEMAPPING     = 19200, // ToneMapping [0-100]
+       CAP_PROP_UNIMATRIX_TEMPORAL_FILTER = 19201, // Temporal Noise-Filter [0-100]
+       CAP_PROP_UNIMATRIX_EXPOSURE_MODE   = 19202, // ExposureMode [auto, hold]
+       CAP_PROP_UNIMATRIX_MAX_GAIN_dB     = 19203, // Limit max automatic gain (unit: dB)
+       CAP_PROP_UNIMATRIX_MAX_EXPOSURE_us = 19204, // Limit max automatic exposure time (unit: us)
+       CAP_PROP_UNIMATRIX_ROTATION        = 19205, // Rotate image [0,90,180,270]
+     };
+
+//! UniMatrix: OpticsType
+enum { CAP_UNIMATRIX_OPTICS_TYPE_UNKNOWN  = 0u, //
+       CAP_UNIMATRIX_OPTICS_TYPE_MANUAL   = 1u, // Manual zoom/focus/iris
+       CAP_UNIMATRIX_OPTICS_TYPE_DC       = 2u, // Manual zoom/focus with DirectControl-iris
+       CAP_UNIMATRIX_OPTICS_TYPE_P        = 3u, // Manual zoom/focus with Precise-iris
+       CAP_UNIMATRIX_OPTICS_TYPE_iCS      = 4u, // Intelligent CS-mount
+       CAP_UNIMATRIX_OPTICS_TYPE_CAMBLOCK = 5u, //
+     };
+
+//! UniMatrix: ExposureMode
+enum { CAP_UNIMATRIX_EXPOSURE_MODE_UNKNOWN = 0u, //
+       CAP_UNIMATRIX_EXPOSURE_MODE_AUTO    = 1u, // Automatic exposure
+       CAP_UNIMATRIX_EXPOSURE_MODE_HOLD    = 2u, // Hold current exposure
+     };
+
+//! @} UniMatrix
+
 //! @} videoio_flags_others
 
 
diff --git a/modules/videoio/src/cap_interface.hpp b/modules/videoio/src/cap_interface.hpp
index 720fb0ba80..bc5f2492bf 100644
--- a/modules/videoio/src/cap_interface.hpp
+++ b/modules/videoio/src/cap_interface.hpp
@@ -317,6 +317,8 @@ Ptr<IVideoCapture> create_ueye_camera(int camera);
 
 Ptr<IVideoCapture> create_Aravis_capture( int index );
 
+Ptr<IVideoCapture> createAxisVDOCapture(int channel);
+
 Ptr<IVideoCapture> createMotionJpegCapture(const std::string& filename);
 Ptr<IVideoWriter> createMotionJpegWriter(const std::string& filename, int fourcc,
                                          double fps, const Size& frameSize,
diff --git a/modules/videoio/src/videoio_registry.cpp b/modules/videoio/src/videoio_registry.cpp
index 3ee1bab822..98025d46c1 100644
--- a/modules/videoio/src/videoio_registry.cpp
+++ b/modules/videoio/src/videoio_registry.cpp
@@ -136,6 +136,12 @@ static const struct VideoBackendInfo builtin_backends[] =
     DECLARE_DYNAMIC_BACKEND(CAP_UEYE, "UEYE", MODE_CAPTURE_BY_INDEX),
 #endif
 
+#ifdef HAVE_AXIS_VDO
+    DECLARE_STATIC_BACKEND(CAP_AXIS_VDO,  "AXIS_VDO", MODE_CAPTURE_BY_INDEX, 0, createAxisVDOCapture, 0),
+#elif defined(ENABLE_PLUGINS)
+    DECLARE_DYNAMIC_BACKEND(CAP_AXIS_VDO, "AXIS_VDO", MODE_CAPTURE_BY_INDEX),
+#endif
+
 #ifdef HAVE_GPHOTO2
     DECLARE_STATIC_BACKEND(CAP_GPHOTO2, "GPHOTO2", MODE_CAPTURE_ALL, createGPhoto2Capture, createGPhoto2Capture, 0),
 #endif
